class Solution {
public:
    int minimumSubarrayLength(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        int n = nums.size(),i = 0,p = 0,ans = INT_MAX;
        bitset<32> bs(0);
        while(i < n){
            bitset<32> temp(nums[i]);
            for(int j=0;j<32;j++){
                mp[j] += temp[j];
                bs[j] = (mp[j] != 0);
            }
            auto val = bs.to_ulong();
            while(val >= k){
                ans = min(ans,i - p + 1);
                bitset<32> flag(nums[p]);
                for(int j=0;j<32;j++){
                    mp[j] -= flag[j];
                    mp[j] = max(mp[j],0);
                    bs[j] = (mp[j] != 0);
                }
                val = bs.to_ulong();
                p++;
                if(val == 0){
                    break;
                }
            }
            i++;
        }
        if(ans == INT_MAX)
            return -1;
        return ans;
    }
};